// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.0.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.454
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace SpecSalad.features.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute(@"I want to write Cucumber features without step definitions
So that I don't have to focus on writing regular expressions.
and save time maintaining large step defination files
and spend even more time delivering valuable fetures to my stakeholders

I should be able to define scenarios with multiple roles, to enable me to
define the specifications of a project easily.")]
    public partial class MultipleRolesWithinAScenarioFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MultipleRoles.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiple Roles Within a Scenario", @"I want to write Cucumber features without step definitions
So that I don't have to focus on writing regular expressions.
and save time maintaining large step defination files
and spend even more time delivering valuable fetures to my stakeholders

I should be able to define scenarios with multiple roles, to enable me to
define the specifications of a project easily.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles the first is primary and used as defaut")]
        public virtual void DefiningTwoRolesTheFirstIsPrimaryAndUsedAsDefaut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles the first is primary and used as defaut", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I am a specified role");
#line 12
 testRunner.And("there is a secondary role");
#line 13
 testRunner.When("I attempt to do the return one task");
#line 14
 testRunner.Then("I should see the answer \'1\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles, actions interplay and results from primary")]
        public virtual void DefiningTwoRolesActionsInterplayAndResultsFromPrimary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles, actions interplay and results from primary", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I am a specified role");
#line 18
 testRunner.And("there is a secondary role");
#line 19
 testRunner.When("I attempt to do the return one task");
#line 20
 testRunner.And("the secondary role attempts to do the subtract one task");
#line 21
 testRunner.Then("I should see the answer \'0\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles, which share the same action in different ways")]
        public virtual void DefiningTwoRolesWhichShareTheSameActionInDifferentWays()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles, which share the same action in different ways", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I am a specified role");
#line 25
 testRunner.And("there is a secondary role");
#line 26
 testRunner.When("I attempt to do the return one task");
#line 27
 testRunner.And("the secondary role attempts to do the return one task");
#line 28
 testRunner.Then("I should see the answer \'3\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles, getting an equal answer from the second role")]
        public virtual void DefiningTwoRolesGettingAnEqualAnswerFromTheSecondRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles, getting an equal answer from the second role", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I am a specified role");
#line 32
 testRunner.And("there is a secondary role");
#line 33
 testRunner.When("I attempt to do the return one task");
#line 34
 testRunner.Then("the secondary role should see the answer \'1\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles, with a question from the secondary role")]
        public virtual void DefiningTwoRolesWithAQuestionFromTheSecondaryRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles, with a question from the secondary role", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I am a specified role");
#line 38
 testRunner.And("there is a secondary role");
#line 39
 testRunner.When("I attempt to do the return one task");
#line 40
 testRunner.Then("the secondary role should see one");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining two roles with a question that includes the answer from the secondary ro" +
            "le")]
        public virtual void DefiningTwoRolesWithAQuestionThatIncludesTheAnswerFromTheSecondaryRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining two roles with a question that includes the answer from the secondary ro" +
                    "le", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I am a specified role");
#line 44
 testRunner.And("there is a secondary role");
#line 45
 testRunner.When("I attempt to do the return one task");
#line 46
 testRunner.Then("the secondary role should see the answers that includes: 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple roles in one scenario")]
        public virtual void MultipleRolesInOneScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple roles in one scenario", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I am a specified role");
#line 50
 testRunner.And("there is a secondary role");
#line 51
 testRunner.And("there is a auxiliary role");
#line 52
 testRunner.When("the auxiliary role attempts to do the return one task");
#line 53
 testRunner.And("the secondary role attempts to do the return one task");
#line 54
 testRunner.Then("I should see the answer \'3\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining the role using the secondary role given")]
        public virtual void DefiningTheRoleUsingTheSecondaryRoleGiven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining the role using the secondary role given", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("there is a secondary role");
#line 58
 testRunner.When("the secondary role attempts to do the return one task");
#line 59
 testRunner.Then("the secondary role should see the answer \'2\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Defining the role but calling steps without role")]
        public virtual void DefiningTheRoleButCallingStepsWithoutRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Defining the role but calling steps without role", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given("there is a secondary role");
#line 63
 testRunner.When("I attempt to do the return one task");
#line 64
 testRunner.Then("I should see the answer \'2\'");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
