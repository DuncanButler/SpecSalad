// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace SpecSalad.features.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Given Syntax Options")]
    public partial class GivenSyntaxOptionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GivenStepSyntaxOptions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Given Syntax Options", @"As Colin. a conscientious cuker
I want to write Cucumber features without step definitions
So that I don't have to focus on writing regular expressions.
and save time maintaining large step defination files
and spend even more time delivering valuable fetures to my stakeholders

The tasks I define should link correctly to the specified role and be able to
define a required result.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given with the syntax I am a")]
        public virtual void CallingGivenWithTheSyntaxIAmA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given with the syntax I am a", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I am a specified role");
#line 13
 testRunner.When("I attempt to do the return one task");
#line 14
 testRunner.Then("I should see the answer \'1\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given with the syntax you are a")]
        public virtual void CallingGivenWithTheSyntaxYouAreA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given with the syntax you are a", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("you are a specified role");
#line 18
 testRunner.When("I attempt to do the return one task");
#line 19
 testRunner.Then("I should see the answer \'1\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given and with the syntax I attempt to")]
        public virtual void CallingGivenAndWithTheSyntaxIAttemptTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given and with the syntax I attempt to", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I am a specified role");
#line 23
 testRunner.And("I attempt to do the return task: with a single parameter \'2\'");
#line 24
 testRunner.When("I attempt to do the return task: with a single parameter \'2\'");
#line 25
 testRunner.Then("I should see the answer \'4\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given and with the syntax I was able to")]
        public virtual void CallingGivenAndWithTheSyntaxIWasAbleTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given and with the syntax I was able to", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I am a specified role");
#line 29
 testRunner.And("I was able to do the return task: with a single parameter \'2\'");
#line 30
 testRunner.When("I attempt to do the return task: with a single parameter \'2\'");
#line 31
 testRunner.Then("I should see the answer \'4\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given and with the syntax I were able to")]
        public virtual void CallingGivenAndWithTheSyntaxIWereAbleTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given and with the syntax I were able to", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I am a specified role");
#line 35
 testRunner.And("I were able to do the return task: with a single parameter \'2\'");
#line 36
 testRunner.When("I attempt to do the return task: with a single parameter \'2\'");
#line 37
 testRunner.Then("I should see the answer \'4\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given and with the syntax I did")]
        public virtual void CallingGivenAndWithTheSyntaxIDid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given and with the syntax I did", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I am a specified role");
#line 41
 testRunner.And("I did the return task: with a single parameter \'2\'");
#line 42
 testRunner.When("I attempt to do the return task: with a single parameter \'2\'");
#line 43
 testRunner.Then("I should see the answer \'4\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calling given and with the syntax including a comma instead of the colon")]
        public virtual void CallingGivenAndWithTheSyntaxIncludingACommaInsteadOfTheColon()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calling given and with the syntax including a comma instead of the colon", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I am a specified role");
#line 47
 testRunner.And("I did the return task, with a single parameter \'2\'");
#line 48
 testRunner.When("I attempt to do the return task: with a single parameter \'1\'");
#line 49
 testRunner.Then("I should see the answer \'3\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
