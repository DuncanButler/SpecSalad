// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Calculator.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Typical Calculator Workflow")]
    public partial class TypicalCalculatorWorkflowFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "typical_workflow.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Typical Calculator Workflow", "As Callie, a calculating individual\nI want to interact with this calculator like " +
                    "any other calculator\nSo that I can start using it straight away", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See what I expect based on specific interactions")]
        [NUnit.Framework.TestCaseAttribute("1 =", "1")]
        [NUnit.Framework.TestCaseAttribute("1 + =", "2")]
        [NUnit.Framework.TestCaseAttribute("1 - =", "0")]
        [NUnit.Framework.TestCaseAttribute("1 + = =", "3")]
        [NUnit.Framework.TestCaseAttribute("1 + 1 = 5 + =", "10")]
        public virtual void SeeWhatIExpectBasedOnSpecificInteractions(string interactions, string expected)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See what I expect based on specific interactions", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am a calculating individual");
#line 8
 testRunner.And("I was able to switch on the calculator");
#line 9
 testRunner.When(string.Format("I attempt to calculate: with the following \'{0}\'", interactions));
#line 10
 testRunner.Then(string.Format("I should see the answer \'{0}\'", expected));
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
